void lalloc(int x) {
    header = free_list_header;

    while (header != nullptr) {
        if (x > header.size) {
            header = header.next;
            if (header == nullptr)
                return nullptr; //preserves free list, no allocation
            continue; //check next header for fit
        }

        if (x + 32 >= header.size) { //hijack
            header.size = x;

            if (header.next == nullptr && header.prev == nullptr) {
                free_list_header == null;
            } else if (header.next == nullptr && header.prev != nullptr) { //at end of list
                header.prev.next == nullptr;
                header.prev == nullptr;
            } else if (header.next != nullptr && header.prev == nullptr) { //head of list
                header.next.prev == nullptr;
                free_list_header = header.next;
                header.next == nullptr;
            } else {
                header.next.prev = header.prev;
                header.prev.next = header.next;
                header.prev == nullptr;
                header.next == nullptr;
            }

        } else {            
            new_header = header + 32 + x;
            new_header.size = header.size - 32 - x;

            if (header.next == nullptr && header.prev == nullptr) {
                new_header.next = nullptr;
                new_header.prev = nullptr;
                free_list_header = new_header;
            } else if (header.next == nullptr && header.prev != nullptr) { //at end of list
                new_header.next = nullptr;
                new_header.prev = header.prev;
            } else if (header.next != nullptr && header.prev == nullptr) { //head of list
                new_header.next = header.next;
                new_header.prev = nullptr;
                free_list_header = new_header;
            } else {
                new_header.next = header.next;
                new_header.prev = header.prev;
            }
        }

        return header;
    }

    return nullptr;
}

void merge(block p, block n) {
    p->next = n->next;
    n->next->prev = p;
    p->size = p->size + n->size + 32;
}

void lfree(void spc) {
    block header = free_list_header;
    block alloc = (struct block *) (spc - 32); //memory to be freed

    if (header == nullptr) { //initially empty list no merge
        free_list_header = alloc;
        return;
    }
    
    while (true) {        
        if (header->prev == nullptr) { //initially head (includes singular)
            if (alloc->space < header->space) {
                alloc->next = header;
                header->prev = alloc;
                free_list_header = alloc;
                break;
            }
        } else if (header->next == nullptr) { //initially end (singular)
            if (alloc->space < header->space) {
                alloc->next = header;
                header->prev = alloc;
                alloc->prev = header->prev;
                alloc->prev->next = alloc;
            } else {
                alloc->prev = header;
                header->next = alloc;
            }
            break;
        } else if (header->prev != nullptr && header->next != nullptr) { //initially nonsingular between
            if (alloc->space < header->space) { 
                alloc->next = header;
                header->prev = alloc;
                alloc->prev = header->prev;
                alloc->prev->next = alloc;
                break;
            }
        }
        
        header = header->next; //none of cases satisfy
    }
    
    if (alloc->next != nullptr && alloc->space + alloc->size == alloc->next) // right-merge
        merge(alloc, alloc->next);
    if (alloc->prev != nullptr && alloc->prev->space + alloc->prev->size == alloc) // left-merge
        merge(alloc->prev, alloc);
}